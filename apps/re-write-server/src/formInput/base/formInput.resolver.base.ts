/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { FormInput } from "./FormInput";
import { FormInputCountArgs } from "./FormInputCountArgs";
import { FormInputFindManyArgs } from "./FormInputFindManyArgs";
import { FormInputFindUniqueArgs } from "./FormInputFindUniqueArgs";
import { CreateFormInputArgs } from "./CreateFormInputArgs";
import { UpdateFormInputArgs } from "./UpdateFormInputArgs";
import { DeleteFormInputArgs } from "./DeleteFormInputArgs";
import { FormInputService } from "../formInput.service";
@graphql.Resolver(() => FormInput)
export class FormInputResolverBase {
  constructor(protected readonly service: FormInputService) {}

  async _formInputsMeta(
    @graphql.Args() args: FormInputCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [FormInput])
  async formInputs(
    @graphql.Args() args: FormInputFindManyArgs
  ): Promise<FormInput[]> {
    return this.service.formInputs(args);
  }

  @graphql.Query(() => FormInput, { nullable: true })
  async formInput(
    @graphql.Args() args: FormInputFindUniqueArgs
  ): Promise<FormInput | null> {
    const result = await this.service.formInput(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => FormInput)
  async createFormInput(
    @graphql.Args() args: CreateFormInputArgs
  ): Promise<FormInput> {
    return await this.service.createFormInput({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => FormInput)
  async updateFormInput(
    @graphql.Args() args: UpdateFormInputArgs
  ): Promise<FormInput | null> {
    try {
      return await this.service.updateFormInput({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FormInput)
  async deleteFormInput(
    @graphql.Args() args: DeleteFormInputArgs
  ): Promise<FormInput | null> {
    try {
      return await this.service.deleteFormInput(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
