/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FormInputService } from "../formInput.service";
import { FormInputCreateInput } from "./FormInputCreateInput";
import { FormInput } from "./FormInput";
import { FormInputFindManyArgs } from "./FormInputFindManyArgs";
import { FormInputWhereUniqueInput } from "./FormInputWhereUniqueInput";
import { FormInputUpdateInput } from "./FormInputUpdateInput";

export class FormInputControllerBase {
  constructor(protected readonly service: FormInputService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FormInput })
  async createFormInput(
    @common.Body() data: FormInputCreateInput
  ): Promise<FormInput> {
    return await this.service.createFormInput({
      data: data,
      select: {
        createdAt: true,
        id: true,
        input1: true,
        input2: true,
        input3: true,
        input4: true,
        input5: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FormInput] })
  @ApiNestedQuery(FormInputFindManyArgs)
  async formInputs(@common.Req() request: Request): Promise<FormInput[]> {
    const args = plainToClass(FormInputFindManyArgs, request.query);
    return this.service.formInputs({
      ...args,
      select: {
        createdAt: true,
        id: true,
        input1: true,
        input2: true,
        input3: true,
        input4: true,
        input5: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FormInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async formInput(
    @common.Param() params: FormInputWhereUniqueInput
  ): Promise<FormInput | null> {
    const result = await this.service.formInput({
      where: params,
      select: {
        createdAt: true,
        id: true,
        input1: true,
        input2: true,
        input3: true,
        input4: true,
        input5: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FormInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFormInput(
    @common.Param() params: FormInputWhereUniqueInput,
    @common.Body() data: FormInputUpdateInput
  ): Promise<FormInput | null> {
    try {
      return await this.service.updateFormInput({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          input1: true,
          input2: true,
          input3: true,
          input4: true,
          input5: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FormInput })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFormInput(
    @common.Param() params: FormInputWhereUniqueInput
  ): Promise<FormInput | null> {
    try {
      return await this.service.deleteFormInput({
        where: params,
        select: {
          createdAt: true,
          id: true,
          input1: true,
          input2: true,
          input3: true,
          input4: true,
          input5: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
