/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, FormInput as PrismaFormInput } from "@prisma/client";

export class FormInputServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FormInputCountArgs, "select">
  ): Promise<number> {
    return this.prisma.formInput.count(args);
  }

  async formInputs(
    args: Prisma.FormInputFindManyArgs
  ): Promise<PrismaFormInput[]> {
    return this.prisma.formInput.findMany(args);
  }
  async formInput(
    args: Prisma.FormInputFindUniqueArgs
  ): Promise<PrismaFormInput | null> {
    return this.prisma.formInput.findUnique(args);
  }
  async createFormInput(
    args: Prisma.FormInputCreateArgs
  ): Promise<PrismaFormInput> {
    return this.prisma.formInput.create(args);
  }
  async updateFormInput(
    args: Prisma.FormInputUpdateArgs
  ): Promise<PrismaFormInput> {
    return this.prisma.formInput.update(args);
  }
  async deleteFormInput(
    args: Prisma.FormInputDeleteArgs
  ): Promise<PrismaFormInput> {
    return this.prisma.formInput.delete(args);
  }
}
